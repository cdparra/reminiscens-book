<!-- Build file for compiling, deploying and testing PlaceBooks webapp -->

<project default="install" basedir=".">

	<!-- Set catalina.home, hamcrest.home and junit.home in build.properties -->
	<property file="build.properties" />

	<property name="warfile.dir" value="build" />
	<property name="war.dir" value="war" />
	<property name="classes.dir" value="${war.dir}/WEB-INF/classes" />
	<property name="warlib.dir" value="${war.dir}/WEB-INF/lib" />
	<property name="lib.dir" value="lib" />
	<property name="src.dir" value="src" />
	<property name="xsd.dir" value="xsd" />
	<property name="test.dir" value="test" />
	<property name="javadoc.dir" value="docs/api" />
	<property name="basepackage.name" value="placebooks" />
	<property name="editor.name" value="${basepackage.name}.PlaceBookEditor" />
	<property name="git.url" value="https://github.com/horizon-institute/Bridging-the-Rural-Divide--Placebooks/commit/" />

	<property name="placebooks.props.dev-server" 
			  value="${src.dir}/dev-server-placebooks.properties" />
	<property name="placebooks.props.server" 
			  value="${src.dir}/server-placebooks.properties" />
	<property name="placebooks.props.personal" 
			  value="${src.dir}/personal-placebooks.properties" />
	<property name="placebooks.props.pcw" 
			  value="${src.dir}/pcw-placebooks.properties" />

	<property name="placebooks.props.target"
			  value="${classes.dir}/placebooks.properties" />

	<property name="log4j.props" value="${src.dir}/log4j.properties" />

	<property name="jaxb.dir" value="${basepackage.name}/model/jaxb" />
	<property name="GPX10.package" 
			  value="${basepackage.name}.model.jaxb.GPX10" />
	<property name="GPX11.package" 
			  value="${basepackage.name}.model.jaxb.GPX11" />

	<condition property="git.file" value="git.cmd">
	   <os family="windows"/>
	</condition>

	<property name="git.file" value="git" />

	<path id="classpath">
  		<fileset dir="${warlib.dir}">
    		<include name="*.jar"/>
  		</fileset>
		<fileset dir="${lib.dir}">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${catalina.home}">
			<include name="*.jar"/>
		</fileset>
		<pathelement path="${java.class.path}" />
		<pathelement path="${hamcrest.home}" />
		<pathelement path="${junit.home}" />
	</path>

	<path id="classpath.gwt">
		<path path="${src.dir}"/>
		<fileset dir="${lib.dir}">
			<include name="**.jar"/>
		</fileset>
		<pathelement path="${classes.dir}" />
    </path>
	
	<!-- Configure the custom Ant tasks for the Manager application -->
  	<taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask">
		<classpath refid="classpath" />
	</taskdef>
  	<taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask">
		<classpath refid="classpath" />
	</taskdef>
  	<taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask">
		<classpath refid="classpath" />
	</taskdef>
	
 	<target name="git.revision" description="Store git revision in ${repository.version}">
 	    <exec executable="${git.file}" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
	        <arg value="rev-parse"/>
	        <arg value="HEAD"/>	        
	    </exec>
	    
	    <exec executable="${git.file}" outputproperty="git.describe" failifexecutionfails="false" errorproperty="">
	        <arg value="describe"/>
	        <arg value="--all" />
	        <arg value="--long" />        
	    </exec>
	    
		<echo>Version: ${git.describe} - ${git.revision}</echo>

		<tstamp/>	
		<echo file="${war.dir}/version.html" append="false"><![CDATA[<html><body>
<p>Description: ${git.describe}</p>
<p>Version: <a href="${git.url}${git.revision}">${git.revision}</a></p>
<p>Built: ${TODAY}</p>
</body></html>]]></echo>
	</target>
	
	<target name="makedirs">
		<mkdir dir="${warfile.dir}" />
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${javadoc.dir}" />
	</target>

	<target name="properties.dev-server" if="pfile.dev">
		<copy file="${placebooks.props.dev-server}" 
			  tofile="${placebooks.props.target}" overwrite="true" />
	</target>
	<target name="properties.personal" if="pfile.personal">
		<copy file="${placebooks.props.personal}" 
			  tofile="${placebooks.props.target}" overwrite="true" />
	</target>
	<target name="properties.server" if="pfile.server">
		<copy file="${placebooks.props.server}" 
			  tofile="${placebooks.props.target}" overwrite="true" />
	</target>
	<target name="properties.pcw" if="pfile.pcw">
		<copy file="${placebooks.props.pcw}" 
			  tofile="${placebooks.props.target}" overwrite="true" />
	</target>


	<target name="staging" depends="makedirs"
			description="Stage configs to classes dir">

		<copy file="${log4j.props}" todir="${classes.dir}" />

		<antcall target="properties.server" />
		<antcall target="properties.personal" />
		<antcall target="properties.dev-server" />
		<antcall target="properties.pcw" />

		<copy todir="${classes.dir}/META-INF">
			<fileset dir="${src.dir}/META-INF" />
		</copy>
	</target>

	<target name="probe-proxy">
		<condition property="proxy.enabled">
		 	<and>
				<isset property="proxy.host"/>
				<!-- <isreachable host="${proxy.host}"/>-->
		  	</and>
		</condition>
	</target>

	<target name="proxy" depends="probe-proxy" if="proxy.enabled">
		<setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}" />
	</target>


	<target name="jaxb-jar" description="Generate JAR from GPX bindings">
		<jar jarfile="${lib.dir}/gpx-bindings.jar" 
			 basedir="${classes.dir}" includes="${jaxb.dir}/**" />
	</target>

	<target name="jaxb" description="Generate Java bindings from GPX XSD">
		<!-- GPS 1.0 spec -->
		<java classname="com.sun.tools.internal.xjc.XJCFacade">
            <arg value="-p" />
            <arg value="${GPX10.package}" />
            <arg value="${xsd.dir}/gpx-1.0.xsd" />
			<arg value="-d" />
			<arg value="${src.dir}" />
	    </java>
		<!-- GPS 1.1 spec -->
		<java classname="com.sun.tools.internal.xjc.XJCFacade">
            <arg value="-p" />
            <arg value="${GPX11.package}" />
            <arg value="${xsd.dir}/gpx-1.1.xsd" />
			<arg value="-d" />
			<arg value="${src.dir}" />
	    </java>
	</target>

	<target name="compile" depends="makedirs"
			description="Compile classes into web archive dir">
		<javac destdir="${classes.dir}" debug="on" deprecation="on" 
			   includeAntRuntime="no">
			<src path="${src.dir}"/>
			<compilerarg value="-Xlint:unchecked" />
			<classpath refid="classpath"/>
		</javac>
	</target>

	<target name="compile-gwt" depends="compile" 
			description="Compile GWT web interface">
		<java classpathref="classpath.gwt" failonerror="true" fork="true"
			maxmemory="512m"
	        classname="com.google.gwt.dev.Compiler"> 
	        <arg line="-war ${war.dir}"/> 
			<arg line="-logLevel INFO"/>
	        <arg line="${editor.name}"/>
		</java>
	</target>
	
	<target name="compile-test" depends="compile"
			description="Compile test classes">
		<javac destdir="${classes.dir}" debug="on" deprecation="on" 
			   includeAntRuntime="no">
			<src path="${test.dir}" />
			<compilerarg value="-Xlint:unchecked" />
			<classpath refid="classpath"/>
		</javac>
	</target>
	
	<target name="war" depends="compile,staging,git.revision"
			description="Create the web archive file">
		<jar jarfile="${warfile.dir}/${basepackage.name}.war" 
			 basedir="${war.dir}">
			<include name="**/*" />
		</jar>
	</target>

	<target name="test" depends="compile-test,staging" 
			description="JUnit testing">
		<junit fork="yes" haltonfailure="yes" showoutput="yes">
			<classpath>
				<path refid="classpath" />
				<pathelement path="${classes.dir}" />
			</classpath>
      		<formatter type="brief" usefile="false" />
      		<test name="placebooks.test.UserTest" />
			<test name="placebooks.test.PlaceBookTests" />
			<test name="placebooks.test.PersistenceTests" />			
			<test name="placebooks.test.EverytrailHelperTest" />
			<test name="placebooks.test.PlacebooksIntegrationTests" />
    	</junit>
	</target>

	<target name="docs" depends="makedirs">
		<javadoc sourcepath="${src.dir}"
				 defaultexcludes="yes" destdir="${javadoc.dir}"
				 author="true" version="true" use="true"
           	 	windowtitle="PlaceBooks API documentation">
			<doctitle>
				<![CDATA[<h1>PlaceBooks API documentation</h1>]]>
			</doctitle>
			<fileset dir="${src.dir}" defaultexcludes="yes">
	            <include name="**/*.java"/>
        	</fileset>
		</javadoc>
	</target>

	<target name="initdb" depends="compile,staging,proxy">
        <java classname="placebooks.utils.InitializeDatabase">
			<classpath>
				<path refid="classpath" />
				<pathelement path="${classes.dir}" />
			</classpath>
		</java>
    </target>

  	<target name="install" depends="war,proxy"
   			description="Install application to servlet container">
		<deploy url="${manager.url}" username="${manager.username}"
       			password="${manager.password}" path="/${basepackage.name}"
       			war="file:${basedir}/${warfile.dir}/${basepackage.name}.war" />
  	</target>

	<target name="uninstall"
   			description="Remove application on servlet container" 
			depends="proxy">
	    <undeploy url="${manager.url}" username="${manager.username}"
		          password="${manager.password}" path="/${basepackage.name}"/>
  	</target>

 	<target name="reload" depends="war,proxy"
   			description="Reload application on servlet container">

    	<reload url="${manager.url}" username="${manager.username}"
       			password="${manager.password}" path="/${basepackage.name}"/>
  	</target>

	<target name="clean" description="Clean compiled classes">
		<delete dir="${classes.dir}" />
		<delete file="datanucleus.log"/>
	</target>

	<target name="clean-dist" description="Clean web archive file">
		<delete file="${warfile.dir}/${basepackage.name}.war" />
	</target>

	<target name="clean-docs" description="Clean API documentation">
		<delete includeemptydirs="true">
    		<fileset dir="${javadoc.dir}" includes="**/*" />
		</delete>
	</target>

	<target name="clean-gwt" description="Clean GWT-generated files">
		<delete dir="${war.dir}/${editor.name}" />
		<delete dir="${war.dir}/WEB-INF/deploy" />
	</target>

	<target name="clean-all" description="Clean everything" 
			depends="clean,clean-dist,clean-gwt">
	</target>

	<target name="reinstall" description="Uninstalls and reinstalls project"
		    depends="uninstall,install" />

</project>
